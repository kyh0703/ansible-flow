// Code generated by counterfeiter. DO NOT EDIT.
package authfakes

import (
	"context"
	"sync"

	"github.com/kyh0703/flow/internal/core/domain/model"
	autha "github.com/kyh0703/flow/internal/core/dto/auth"
	"github.com/kyh0703/flow/internal/core/service/auth"
)

type FakeService struct {
	GenerateTokensStub        func(context.Context, model.User) (*autha.Token, error)
	generateTokensMutex       sync.RWMutex
	generateTokensArgsForCall []struct {
		arg1 context.Context
		arg2 model.User
	}
	generateTokensReturns struct {
		result1 *autha.Token
		result2 error
	}
	generateTokensReturnsOnCall map[int]struct {
		result1 *autha.Token
		result2 error
	}
	LoginStub        func(context.Context, *autha.LoginDto) (*autha.Token, error)
	loginMutex       sync.RWMutex
	loginArgsForCall []struct {
		arg1 context.Context
		arg2 *autha.LoginDto
	}
	loginReturns struct {
		result1 *autha.Token
		result2 error
	}
	loginReturnsOnCall map[int]struct {
		result1 *autha.Token
		result2 error
	}
	LogoutStub        func(context.Context) error
	logoutMutex       sync.RWMutex
	logoutArgsForCall []struct {
		arg1 context.Context
	}
	logoutReturns struct {
		result1 error
	}
	logoutReturnsOnCall map[int]struct {
		result1 error
	}
	RefreshStub        func(context.Context, string) (*autha.Token, error)
	refreshMutex       sync.RWMutex
	refreshArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	refreshReturns struct {
		result1 *autha.Token
		result2 error
	}
	refreshReturnsOnCall map[int]struct {
		result1 *autha.Token
		result2 error
	}
	RegisterStub        func(context.Context, *autha.RegisterDto) (*autha.Token, error)
	registerMutex       sync.RWMutex
	registerArgsForCall []struct {
		arg1 context.Context
		arg2 *autha.RegisterDto
	}
	registerReturns struct {
		result1 *autha.Token
		result2 error
	}
	registerReturnsOnCall map[int]struct {
		result1 *autha.Token
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeService) GenerateTokens(arg1 context.Context, arg2 model.User) (*autha.Token, error) {
	fake.generateTokensMutex.Lock()
	ret, specificReturn := fake.generateTokensReturnsOnCall[len(fake.generateTokensArgsForCall)]
	fake.generateTokensArgsForCall = append(fake.generateTokensArgsForCall, struct {
		arg1 context.Context
		arg2 model.User
	}{arg1, arg2})
	stub := fake.GenerateTokensStub
	fakeReturns := fake.generateTokensReturns
	fake.recordInvocation("GenerateTokens", []interface{}{arg1, arg2})
	fake.generateTokensMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeService) GenerateTokensCallCount() int {
	fake.generateTokensMutex.RLock()
	defer fake.generateTokensMutex.RUnlock()
	return len(fake.generateTokensArgsForCall)
}

func (fake *FakeService) GenerateTokensCalls(stub func(context.Context, model.User) (*autha.Token, error)) {
	fake.generateTokensMutex.Lock()
	defer fake.generateTokensMutex.Unlock()
	fake.GenerateTokensStub = stub
}

func (fake *FakeService) GenerateTokensArgsForCall(i int) (context.Context, model.User) {
	fake.generateTokensMutex.RLock()
	defer fake.generateTokensMutex.RUnlock()
	argsForCall := fake.generateTokensArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeService) GenerateTokensReturns(result1 *autha.Token, result2 error) {
	fake.generateTokensMutex.Lock()
	defer fake.generateTokensMutex.Unlock()
	fake.GenerateTokensStub = nil
	fake.generateTokensReturns = struct {
		result1 *autha.Token
		result2 error
	}{result1, result2}
}

func (fake *FakeService) GenerateTokensReturnsOnCall(i int, result1 *autha.Token, result2 error) {
	fake.generateTokensMutex.Lock()
	defer fake.generateTokensMutex.Unlock()
	fake.GenerateTokensStub = nil
	if fake.generateTokensReturnsOnCall == nil {
		fake.generateTokensReturnsOnCall = make(map[int]struct {
			result1 *autha.Token
			result2 error
		})
	}
	fake.generateTokensReturnsOnCall[i] = struct {
		result1 *autha.Token
		result2 error
	}{result1, result2}
}

func (fake *FakeService) Login(arg1 context.Context, arg2 *autha.LoginDto) (*autha.Token, error) {
	fake.loginMutex.Lock()
	ret, specificReturn := fake.loginReturnsOnCall[len(fake.loginArgsForCall)]
	fake.loginArgsForCall = append(fake.loginArgsForCall, struct {
		arg1 context.Context
		arg2 *autha.LoginDto
	}{arg1, arg2})
	stub := fake.LoginStub
	fakeReturns := fake.loginReturns
	fake.recordInvocation("Login", []interface{}{arg1, arg2})
	fake.loginMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeService) LoginCallCount() int {
	fake.loginMutex.RLock()
	defer fake.loginMutex.RUnlock()
	return len(fake.loginArgsForCall)
}

func (fake *FakeService) LoginCalls(stub func(context.Context, *autha.LoginDto) (*autha.Token, error)) {
	fake.loginMutex.Lock()
	defer fake.loginMutex.Unlock()
	fake.LoginStub = stub
}

func (fake *FakeService) LoginArgsForCall(i int) (context.Context, *autha.LoginDto) {
	fake.loginMutex.RLock()
	defer fake.loginMutex.RUnlock()
	argsForCall := fake.loginArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeService) LoginReturns(result1 *autha.Token, result2 error) {
	fake.loginMutex.Lock()
	defer fake.loginMutex.Unlock()
	fake.LoginStub = nil
	fake.loginReturns = struct {
		result1 *autha.Token
		result2 error
	}{result1, result2}
}

func (fake *FakeService) LoginReturnsOnCall(i int, result1 *autha.Token, result2 error) {
	fake.loginMutex.Lock()
	defer fake.loginMutex.Unlock()
	fake.LoginStub = nil
	if fake.loginReturnsOnCall == nil {
		fake.loginReturnsOnCall = make(map[int]struct {
			result1 *autha.Token
			result2 error
		})
	}
	fake.loginReturnsOnCall[i] = struct {
		result1 *autha.Token
		result2 error
	}{result1, result2}
}

func (fake *FakeService) Logout(arg1 context.Context) error {
	fake.logoutMutex.Lock()
	ret, specificReturn := fake.logoutReturnsOnCall[len(fake.logoutArgsForCall)]
	fake.logoutArgsForCall = append(fake.logoutArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.LogoutStub
	fakeReturns := fake.logoutReturns
	fake.recordInvocation("Logout", []interface{}{arg1})
	fake.logoutMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeService) LogoutCallCount() int {
	fake.logoutMutex.RLock()
	defer fake.logoutMutex.RUnlock()
	return len(fake.logoutArgsForCall)
}

func (fake *FakeService) LogoutCalls(stub func(context.Context) error) {
	fake.logoutMutex.Lock()
	defer fake.logoutMutex.Unlock()
	fake.LogoutStub = stub
}

func (fake *FakeService) LogoutArgsForCall(i int) context.Context {
	fake.logoutMutex.RLock()
	defer fake.logoutMutex.RUnlock()
	argsForCall := fake.logoutArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeService) LogoutReturns(result1 error) {
	fake.logoutMutex.Lock()
	defer fake.logoutMutex.Unlock()
	fake.LogoutStub = nil
	fake.logoutReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeService) LogoutReturnsOnCall(i int, result1 error) {
	fake.logoutMutex.Lock()
	defer fake.logoutMutex.Unlock()
	fake.LogoutStub = nil
	if fake.logoutReturnsOnCall == nil {
		fake.logoutReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.logoutReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeService) Refresh(arg1 context.Context, arg2 string) (*autha.Token, error) {
	fake.refreshMutex.Lock()
	ret, specificReturn := fake.refreshReturnsOnCall[len(fake.refreshArgsForCall)]
	fake.refreshArgsForCall = append(fake.refreshArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.RefreshStub
	fakeReturns := fake.refreshReturns
	fake.recordInvocation("Refresh", []interface{}{arg1, arg2})
	fake.refreshMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeService) RefreshCallCount() int {
	fake.refreshMutex.RLock()
	defer fake.refreshMutex.RUnlock()
	return len(fake.refreshArgsForCall)
}

func (fake *FakeService) RefreshCalls(stub func(context.Context, string) (*autha.Token, error)) {
	fake.refreshMutex.Lock()
	defer fake.refreshMutex.Unlock()
	fake.RefreshStub = stub
}

func (fake *FakeService) RefreshArgsForCall(i int) (context.Context, string) {
	fake.refreshMutex.RLock()
	defer fake.refreshMutex.RUnlock()
	argsForCall := fake.refreshArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeService) RefreshReturns(result1 *autha.Token, result2 error) {
	fake.refreshMutex.Lock()
	defer fake.refreshMutex.Unlock()
	fake.RefreshStub = nil
	fake.refreshReturns = struct {
		result1 *autha.Token
		result2 error
	}{result1, result2}
}

func (fake *FakeService) RefreshReturnsOnCall(i int, result1 *autha.Token, result2 error) {
	fake.refreshMutex.Lock()
	defer fake.refreshMutex.Unlock()
	fake.RefreshStub = nil
	if fake.refreshReturnsOnCall == nil {
		fake.refreshReturnsOnCall = make(map[int]struct {
			result1 *autha.Token
			result2 error
		})
	}
	fake.refreshReturnsOnCall[i] = struct {
		result1 *autha.Token
		result2 error
	}{result1, result2}
}

func (fake *FakeService) Register(arg1 context.Context, arg2 *autha.RegisterDto) (*autha.Token, error) {
	fake.registerMutex.Lock()
	ret, specificReturn := fake.registerReturnsOnCall[len(fake.registerArgsForCall)]
	fake.registerArgsForCall = append(fake.registerArgsForCall, struct {
		arg1 context.Context
		arg2 *autha.RegisterDto
	}{arg1, arg2})
	stub := fake.RegisterStub
	fakeReturns := fake.registerReturns
	fake.recordInvocation("Register", []interface{}{arg1, arg2})
	fake.registerMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeService) RegisterCallCount() int {
	fake.registerMutex.RLock()
	defer fake.registerMutex.RUnlock()
	return len(fake.registerArgsForCall)
}

func (fake *FakeService) RegisterCalls(stub func(context.Context, *autha.RegisterDto) (*autha.Token, error)) {
	fake.registerMutex.Lock()
	defer fake.registerMutex.Unlock()
	fake.RegisterStub = stub
}

func (fake *FakeService) RegisterArgsForCall(i int) (context.Context, *autha.RegisterDto) {
	fake.registerMutex.RLock()
	defer fake.registerMutex.RUnlock()
	argsForCall := fake.registerArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeService) RegisterReturns(result1 *autha.Token, result2 error) {
	fake.registerMutex.Lock()
	defer fake.registerMutex.Unlock()
	fake.RegisterStub = nil
	fake.registerReturns = struct {
		result1 *autha.Token
		result2 error
	}{result1, result2}
}

func (fake *FakeService) RegisterReturnsOnCall(i int, result1 *autha.Token, result2 error) {
	fake.registerMutex.Lock()
	defer fake.registerMutex.Unlock()
	fake.RegisterStub = nil
	if fake.registerReturnsOnCall == nil {
		fake.registerReturnsOnCall = make(map[int]struct {
			result1 *autha.Token
			result2 error
		})
	}
	fake.registerReturnsOnCall[i] = struct {
		result1 *autha.Token
		result2 error
	}{result1, result2}
}

func (fake *FakeService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.generateTokensMutex.RLock()
	defer fake.generateTokensMutex.RUnlock()
	fake.loginMutex.RLock()
	defer fake.loginMutex.RUnlock()
	fake.logoutMutex.RLock()
	defer fake.logoutMutex.RUnlock()
	fake.refreshMutex.RLock()
	defer fake.refreshMutex.RUnlock()
	fake.registerMutex.RLock()
	defer fake.registerMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ auth.Service = new(FakeService)
