// Code generated by counterfeiter. DO NOT EDIT.
package handlerfakes

import (
	"sync"

	fiber "github.com/gofiber/fiber/v2"
	"github.com/kyh0703/flow/internal/core/handler"
)

type FakeNodesHandler struct {
	CreateListStub        func(*fiber.Ctx) error
	createListMutex       sync.RWMutex
	createListArgsForCall []struct {
		arg1 *fiber.Ctx
	}
	createListReturns struct {
		result1 error
	}
	createListReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteListStub        func(*fiber.Ctx) error
	deleteListMutex       sync.RWMutex
	deleteListArgsForCall []struct {
		arg1 *fiber.Ctx
	}
	deleteListReturns struct {
		result1 error
	}
	deleteListReturnsOnCall map[int]struct {
		result1 error
	}
	FindOneStub        func(*fiber.Ctx) error
	findOneMutex       sync.RWMutex
	findOneArgsForCall []struct {
		arg1 *fiber.Ctx
	}
	findOneReturns struct {
		result1 error
	}
	findOneReturnsOnCall map[int]struct {
		result1 error
	}
	TableStub        func() []handler.Mapper
	tableMutex       sync.RWMutex
	tableArgsForCall []struct {
	}
	tableReturns struct {
		result1 []handler.Mapper
	}
	tableReturnsOnCall map[int]struct {
		result1 []handler.Mapper
	}
	UpdateListStub        func(*fiber.Ctx) error
	updateListMutex       sync.RWMutex
	updateListArgsForCall []struct {
		arg1 *fiber.Ctx
	}
	updateListReturns struct {
		result1 error
	}
	updateListReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeNodesHandler) CreateList(arg1 *fiber.Ctx) error {
	fake.createListMutex.Lock()
	ret, specificReturn := fake.createListReturnsOnCall[len(fake.createListArgsForCall)]
	fake.createListArgsForCall = append(fake.createListArgsForCall, struct {
		arg1 *fiber.Ctx
	}{arg1})
	stub := fake.CreateListStub
	fakeReturns := fake.createListReturns
	fake.recordInvocation("CreateList", []interface{}{arg1})
	fake.createListMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeNodesHandler) CreateListCallCount() int {
	fake.createListMutex.RLock()
	defer fake.createListMutex.RUnlock()
	return len(fake.createListArgsForCall)
}

func (fake *FakeNodesHandler) CreateListCalls(stub func(*fiber.Ctx) error) {
	fake.createListMutex.Lock()
	defer fake.createListMutex.Unlock()
	fake.CreateListStub = stub
}

func (fake *FakeNodesHandler) CreateListArgsForCall(i int) *fiber.Ctx {
	fake.createListMutex.RLock()
	defer fake.createListMutex.RUnlock()
	argsForCall := fake.createListArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeNodesHandler) CreateListReturns(result1 error) {
	fake.createListMutex.Lock()
	defer fake.createListMutex.Unlock()
	fake.CreateListStub = nil
	fake.createListReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeNodesHandler) CreateListReturnsOnCall(i int, result1 error) {
	fake.createListMutex.Lock()
	defer fake.createListMutex.Unlock()
	fake.CreateListStub = nil
	if fake.createListReturnsOnCall == nil {
		fake.createListReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createListReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeNodesHandler) DeleteList(arg1 *fiber.Ctx) error {
	fake.deleteListMutex.Lock()
	ret, specificReturn := fake.deleteListReturnsOnCall[len(fake.deleteListArgsForCall)]
	fake.deleteListArgsForCall = append(fake.deleteListArgsForCall, struct {
		arg1 *fiber.Ctx
	}{arg1})
	stub := fake.DeleteListStub
	fakeReturns := fake.deleteListReturns
	fake.recordInvocation("DeleteList", []interface{}{arg1})
	fake.deleteListMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeNodesHandler) DeleteListCallCount() int {
	fake.deleteListMutex.RLock()
	defer fake.deleteListMutex.RUnlock()
	return len(fake.deleteListArgsForCall)
}

func (fake *FakeNodesHandler) DeleteListCalls(stub func(*fiber.Ctx) error) {
	fake.deleteListMutex.Lock()
	defer fake.deleteListMutex.Unlock()
	fake.DeleteListStub = stub
}

func (fake *FakeNodesHandler) DeleteListArgsForCall(i int) *fiber.Ctx {
	fake.deleteListMutex.RLock()
	defer fake.deleteListMutex.RUnlock()
	argsForCall := fake.deleteListArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeNodesHandler) DeleteListReturns(result1 error) {
	fake.deleteListMutex.Lock()
	defer fake.deleteListMutex.Unlock()
	fake.DeleteListStub = nil
	fake.deleteListReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeNodesHandler) DeleteListReturnsOnCall(i int, result1 error) {
	fake.deleteListMutex.Lock()
	defer fake.deleteListMutex.Unlock()
	fake.DeleteListStub = nil
	if fake.deleteListReturnsOnCall == nil {
		fake.deleteListReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteListReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeNodesHandler) FindOne(arg1 *fiber.Ctx) error {
	fake.findOneMutex.Lock()
	ret, specificReturn := fake.findOneReturnsOnCall[len(fake.findOneArgsForCall)]
	fake.findOneArgsForCall = append(fake.findOneArgsForCall, struct {
		arg1 *fiber.Ctx
	}{arg1})
	stub := fake.FindOneStub
	fakeReturns := fake.findOneReturns
	fake.recordInvocation("FindOne", []interface{}{arg1})
	fake.findOneMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeNodesHandler) FindOneCallCount() int {
	fake.findOneMutex.RLock()
	defer fake.findOneMutex.RUnlock()
	return len(fake.findOneArgsForCall)
}

func (fake *FakeNodesHandler) FindOneCalls(stub func(*fiber.Ctx) error) {
	fake.findOneMutex.Lock()
	defer fake.findOneMutex.Unlock()
	fake.FindOneStub = stub
}

func (fake *FakeNodesHandler) FindOneArgsForCall(i int) *fiber.Ctx {
	fake.findOneMutex.RLock()
	defer fake.findOneMutex.RUnlock()
	argsForCall := fake.findOneArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeNodesHandler) FindOneReturns(result1 error) {
	fake.findOneMutex.Lock()
	defer fake.findOneMutex.Unlock()
	fake.FindOneStub = nil
	fake.findOneReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeNodesHandler) FindOneReturnsOnCall(i int, result1 error) {
	fake.findOneMutex.Lock()
	defer fake.findOneMutex.Unlock()
	fake.FindOneStub = nil
	if fake.findOneReturnsOnCall == nil {
		fake.findOneReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.findOneReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeNodesHandler) Table() []handler.Mapper {
	fake.tableMutex.Lock()
	ret, specificReturn := fake.tableReturnsOnCall[len(fake.tableArgsForCall)]
	fake.tableArgsForCall = append(fake.tableArgsForCall, struct {
	}{})
	stub := fake.TableStub
	fakeReturns := fake.tableReturns
	fake.recordInvocation("Table", []interface{}{})
	fake.tableMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeNodesHandler) TableCallCount() int {
	fake.tableMutex.RLock()
	defer fake.tableMutex.RUnlock()
	return len(fake.tableArgsForCall)
}

func (fake *FakeNodesHandler) TableCalls(stub func() []handler.Mapper) {
	fake.tableMutex.Lock()
	defer fake.tableMutex.Unlock()
	fake.TableStub = stub
}

func (fake *FakeNodesHandler) TableReturns(result1 []handler.Mapper) {
	fake.tableMutex.Lock()
	defer fake.tableMutex.Unlock()
	fake.TableStub = nil
	fake.tableReturns = struct {
		result1 []handler.Mapper
	}{result1}
}

func (fake *FakeNodesHandler) TableReturnsOnCall(i int, result1 []handler.Mapper) {
	fake.tableMutex.Lock()
	defer fake.tableMutex.Unlock()
	fake.TableStub = nil
	if fake.tableReturnsOnCall == nil {
		fake.tableReturnsOnCall = make(map[int]struct {
			result1 []handler.Mapper
		})
	}
	fake.tableReturnsOnCall[i] = struct {
		result1 []handler.Mapper
	}{result1}
}

func (fake *FakeNodesHandler) UpdateList(arg1 *fiber.Ctx) error {
	fake.updateListMutex.Lock()
	ret, specificReturn := fake.updateListReturnsOnCall[len(fake.updateListArgsForCall)]
	fake.updateListArgsForCall = append(fake.updateListArgsForCall, struct {
		arg1 *fiber.Ctx
	}{arg1})
	stub := fake.UpdateListStub
	fakeReturns := fake.updateListReturns
	fake.recordInvocation("UpdateList", []interface{}{arg1})
	fake.updateListMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeNodesHandler) UpdateListCallCount() int {
	fake.updateListMutex.RLock()
	defer fake.updateListMutex.RUnlock()
	return len(fake.updateListArgsForCall)
}

func (fake *FakeNodesHandler) UpdateListCalls(stub func(*fiber.Ctx) error) {
	fake.updateListMutex.Lock()
	defer fake.updateListMutex.Unlock()
	fake.UpdateListStub = stub
}

func (fake *FakeNodesHandler) UpdateListArgsForCall(i int) *fiber.Ctx {
	fake.updateListMutex.RLock()
	defer fake.updateListMutex.RUnlock()
	argsForCall := fake.updateListArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeNodesHandler) UpdateListReturns(result1 error) {
	fake.updateListMutex.Lock()
	defer fake.updateListMutex.Unlock()
	fake.UpdateListStub = nil
	fake.updateListReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeNodesHandler) UpdateListReturnsOnCall(i int, result1 error) {
	fake.updateListMutex.Lock()
	defer fake.updateListMutex.Unlock()
	fake.UpdateListStub = nil
	if fake.updateListReturnsOnCall == nil {
		fake.updateListReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateListReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeNodesHandler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createListMutex.RLock()
	defer fake.createListMutex.RUnlock()
	fake.deleteListMutex.RLock()
	defer fake.deleteListMutex.RUnlock()
	fake.findOneMutex.RLock()
	defer fake.findOneMutex.RUnlock()
	fake.tableMutex.RLock()
	defer fake.tableMutex.RUnlock()
	fake.updateListMutex.RLock()
	defer fake.updateListMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeNodesHandler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ handler.NodesHandler = new(FakeNodesHandler)
