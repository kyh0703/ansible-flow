// Code generated by counterfeiter. DO NOT EDIT.
package handlerfakes

import (
	"sync"

	fiber "github.com/gofiber/fiber/v2"
	"github.com/kyh0703/flow/internal/core/handler"
)

type FakeOAuthHandler struct {
	GithubCallbackStub        func(*fiber.Ctx) error
	githubCallbackMutex       sync.RWMutex
	githubCallbackArgsForCall []struct {
		arg1 *fiber.Ctx
	}
	githubCallbackReturns struct {
		result1 error
	}
	githubCallbackReturnsOnCall map[int]struct {
		result1 error
	}
	GithubLoginStub        func(*fiber.Ctx) error
	githubLoginMutex       sync.RWMutex
	githubLoginArgsForCall []struct {
		arg1 *fiber.Ctx
	}
	githubLoginReturns struct {
		result1 error
	}
	githubLoginReturnsOnCall map[int]struct {
		result1 error
	}
	GoogleCallbackStub        func(*fiber.Ctx) error
	googleCallbackMutex       sync.RWMutex
	googleCallbackArgsForCall []struct {
		arg1 *fiber.Ctx
	}
	googleCallbackReturns struct {
		result1 error
	}
	googleCallbackReturnsOnCall map[int]struct {
		result1 error
	}
	GoogleLoginStub        func(*fiber.Ctx) error
	googleLoginMutex       sync.RWMutex
	googleLoginArgsForCall []struct {
		arg1 *fiber.Ctx
	}
	googleLoginReturns struct {
		result1 error
	}
	googleLoginReturnsOnCall map[int]struct {
		result1 error
	}
	KakaoCallbackStub        func(*fiber.Ctx) error
	kakaoCallbackMutex       sync.RWMutex
	kakaoCallbackArgsForCall []struct {
		arg1 *fiber.Ctx
	}
	kakaoCallbackReturns struct {
		result1 error
	}
	kakaoCallbackReturnsOnCall map[int]struct {
		result1 error
	}
	KakaoLoginStub        func(*fiber.Ctx) error
	kakaoLoginMutex       sync.RWMutex
	kakaoLoginArgsForCall []struct {
		arg1 *fiber.Ctx
	}
	kakaoLoginReturns struct {
		result1 error
	}
	kakaoLoginReturnsOnCall map[int]struct {
		result1 error
	}
	TableStub        func() []handler.Mapper
	tableMutex       sync.RWMutex
	tableArgsForCall []struct {
	}
	tableReturns struct {
		result1 []handler.Mapper
	}
	tableReturnsOnCall map[int]struct {
		result1 []handler.Mapper
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeOAuthHandler) GithubCallback(arg1 *fiber.Ctx) error {
	fake.githubCallbackMutex.Lock()
	ret, specificReturn := fake.githubCallbackReturnsOnCall[len(fake.githubCallbackArgsForCall)]
	fake.githubCallbackArgsForCall = append(fake.githubCallbackArgsForCall, struct {
		arg1 *fiber.Ctx
	}{arg1})
	stub := fake.GithubCallbackStub
	fakeReturns := fake.githubCallbackReturns
	fake.recordInvocation("GithubCallback", []interface{}{arg1})
	fake.githubCallbackMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeOAuthHandler) GithubCallbackCallCount() int {
	fake.githubCallbackMutex.RLock()
	defer fake.githubCallbackMutex.RUnlock()
	return len(fake.githubCallbackArgsForCall)
}

func (fake *FakeOAuthHandler) GithubCallbackCalls(stub func(*fiber.Ctx) error) {
	fake.githubCallbackMutex.Lock()
	defer fake.githubCallbackMutex.Unlock()
	fake.GithubCallbackStub = stub
}

func (fake *FakeOAuthHandler) GithubCallbackArgsForCall(i int) *fiber.Ctx {
	fake.githubCallbackMutex.RLock()
	defer fake.githubCallbackMutex.RUnlock()
	argsForCall := fake.githubCallbackArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeOAuthHandler) GithubCallbackReturns(result1 error) {
	fake.githubCallbackMutex.Lock()
	defer fake.githubCallbackMutex.Unlock()
	fake.GithubCallbackStub = nil
	fake.githubCallbackReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeOAuthHandler) GithubCallbackReturnsOnCall(i int, result1 error) {
	fake.githubCallbackMutex.Lock()
	defer fake.githubCallbackMutex.Unlock()
	fake.GithubCallbackStub = nil
	if fake.githubCallbackReturnsOnCall == nil {
		fake.githubCallbackReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.githubCallbackReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeOAuthHandler) GithubLogin(arg1 *fiber.Ctx) error {
	fake.githubLoginMutex.Lock()
	ret, specificReturn := fake.githubLoginReturnsOnCall[len(fake.githubLoginArgsForCall)]
	fake.githubLoginArgsForCall = append(fake.githubLoginArgsForCall, struct {
		arg1 *fiber.Ctx
	}{arg1})
	stub := fake.GithubLoginStub
	fakeReturns := fake.githubLoginReturns
	fake.recordInvocation("GithubLogin", []interface{}{arg1})
	fake.githubLoginMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeOAuthHandler) GithubLoginCallCount() int {
	fake.githubLoginMutex.RLock()
	defer fake.githubLoginMutex.RUnlock()
	return len(fake.githubLoginArgsForCall)
}

func (fake *FakeOAuthHandler) GithubLoginCalls(stub func(*fiber.Ctx) error) {
	fake.githubLoginMutex.Lock()
	defer fake.githubLoginMutex.Unlock()
	fake.GithubLoginStub = stub
}

func (fake *FakeOAuthHandler) GithubLoginArgsForCall(i int) *fiber.Ctx {
	fake.githubLoginMutex.RLock()
	defer fake.githubLoginMutex.RUnlock()
	argsForCall := fake.githubLoginArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeOAuthHandler) GithubLoginReturns(result1 error) {
	fake.githubLoginMutex.Lock()
	defer fake.githubLoginMutex.Unlock()
	fake.GithubLoginStub = nil
	fake.githubLoginReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeOAuthHandler) GithubLoginReturnsOnCall(i int, result1 error) {
	fake.githubLoginMutex.Lock()
	defer fake.githubLoginMutex.Unlock()
	fake.GithubLoginStub = nil
	if fake.githubLoginReturnsOnCall == nil {
		fake.githubLoginReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.githubLoginReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeOAuthHandler) GoogleCallback(arg1 *fiber.Ctx) error {
	fake.googleCallbackMutex.Lock()
	ret, specificReturn := fake.googleCallbackReturnsOnCall[len(fake.googleCallbackArgsForCall)]
	fake.googleCallbackArgsForCall = append(fake.googleCallbackArgsForCall, struct {
		arg1 *fiber.Ctx
	}{arg1})
	stub := fake.GoogleCallbackStub
	fakeReturns := fake.googleCallbackReturns
	fake.recordInvocation("GoogleCallback", []interface{}{arg1})
	fake.googleCallbackMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeOAuthHandler) GoogleCallbackCallCount() int {
	fake.googleCallbackMutex.RLock()
	defer fake.googleCallbackMutex.RUnlock()
	return len(fake.googleCallbackArgsForCall)
}

func (fake *FakeOAuthHandler) GoogleCallbackCalls(stub func(*fiber.Ctx) error) {
	fake.googleCallbackMutex.Lock()
	defer fake.googleCallbackMutex.Unlock()
	fake.GoogleCallbackStub = stub
}

func (fake *FakeOAuthHandler) GoogleCallbackArgsForCall(i int) *fiber.Ctx {
	fake.googleCallbackMutex.RLock()
	defer fake.googleCallbackMutex.RUnlock()
	argsForCall := fake.googleCallbackArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeOAuthHandler) GoogleCallbackReturns(result1 error) {
	fake.googleCallbackMutex.Lock()
	defer fake.googleCallbackMutex.Unlock()
	fake.GoogleCallbackStub = nil
	fake.googleCallbackReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeOAuthHandler) GoogleCallbackReturnsOnCall(i int, result1 error) {
	fake.googleCallbackMutex.Lock()
	defer fake.googleCallbackMutex.Unlock()
	fake.GoogleCallbackStub = nil
	if fake.googleCallbackReturnsOnCall == nil {
		fake.googleCallbackReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.googleCallbackReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeOAuthHandler) GoogleLogin(arg1 *fiber.Ctx) error {
	fake.googleLoginMutex.Lock()
	ret, specificReturn := fake.googleLoginReturnsOnCall[len(fake.googleLoginArgsForCall)]
	fake.googleLoginArgsForCall = append(fake.googleLoginArgsForCall, struct {
		arg1 *fiber.Ctx
	}{arg1})
	stub := fake.GoogleLoginStub
	fakeReturns := fake.googleLoginReturns
	fake.recordInvocation("GoogleLogin", []interface{}{arg1})
	fake.googleLoginMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeOAuthHandler) GoogleLoginCallCount() int {
	fake.googleLoginMutex.RLock()
	defer fake.googleLoginMutex.RUnlock()
	return len(fake.googleLoginArgsForCall)
}

func (fake *FakeOAuthHandler) GoogleLoginCalls(stub func(*fiber.Ctx) error) {
	fake.googleLoginMutex.Lock()
	defer fake.googleLoginMutex.Unlock()
	fake.GoogleLoginStub = stub
}

func (fake *FakeOAuthHandler) GoogleLoginArgsForCall(i int) *fiber.Ctx {
	fake.googleLoginMutex.RLock()
	defer fake.googleLoginMutex.RUnlock()
	argsForCall := fake.googleLoginArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeOAuthHandler) GoogleLoginReturns(result1 error) {
	fake.googleLoginMutex.Lock()
	defer fake.googleLoginMutex.Unlock()
	fake.GoogleLoginStub = nil
	fake.googleLoginReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeOAuthHandler) GoogleLoginReturnsOnCall(i int, result1 error) {
	fake.googleLoginMutex.Lock()
	defer fake.googleLoginMutex.Unlock()
	fake.GoogleLoginStub = nil
	if fake.googleLoginReturnsOnCall == nil {
		fake.googleLoginReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.googleLoginReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeOAuthHandler) KakaoCallback(arg1 *fiber.Ctx) error {
	fake.kakaoCallbackMutex.Lock()
	ret, specificReturn := fake.kakaoCallbackReturnsOnCall[len(fake.kakaoCallbackArgsForCall)]
	fake.kakaoCallbackArgsForCall = append(fake.kakaoCallbackArgsForCall, struct {
		arg1 *fiber.Ctx
	}{arg1})
	stub := fake.KakaoCallbackStub
	fakeReturns := fake.kakaoCallbackReturns
	fake.recordInvocation("KakaoCallback", []interface{}{arg1})
	fake.kakaoCallbackMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeOAuthHandler) KakaoCallbackCallCount() int {
	fake.kakaoCallbackMutex.RLock()
	defer fake.kakaoCallbackMutex.RUnlock()
	return len(fake.kakaoCallbackArgsForCall)
}

func (fake *FakeOAuthHandler) KakaoCallbackCalls(stub func(*fiber.Ctx) error) {
	fake.kakaoCallbackMutex.Lock()
	defer fake.kakaoCallbackMutex.Unlock()
	fake.KakaoCallbackStub = stub
}

func (fake *FakeOAuthHandler) KakaoCallbackArgsForCall(i int) *fiber.Ctx {
	fake.kakaoCallbackMutex.RLock()
	defer fake.kakaoCallbackMutex.RUnlock()
	argsForCall := fake.kakaoCallbackArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeOAuthHandler) KakaoCallbackReturns(result1 error) {
	fake.kakaoCallbackMutex.Lock()
	defer fake.kakaoCallbackMutex.Unlock()
	fake.KakaoCallbackStub = nil
	fake.kakaoCallbackReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeOAuthHandler) KakaoCallbackReturnsOnCall(i int, result1 error) {
	fake.kakaoCallbackMutex.Lock()
	defer fake.kakaoCallbackMutex.Unlock()
	fake.KakaoCallbackStub = nil
	if fake.kakaoCallbackReturnsOnCall == nil {
		fake.kakaoCallbackReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.kakaoCallbackReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeOAuthHandler) KakaoLogin(arg1 *fiber.Ctx) error {
	fake.kakaoLoginMutex.Lock()
	ret, specificReturn := fake.kakaoLoginReturnsOnCall[len(fake.kakaoLoginArgsForCall)]
	fake.kakaoLoginArgsForCall = append(fake.kakaoLoginArgsForCall, struct {
		arg1 *fiber.Ctx
	}{arg1})
	stub := fake.KakaoLoginStub
	fakeReturns := fake.kakaoLoginReturns
	fake.recordInvocation("KakaoLogin", []interface{}{arg1})
	fake.kakaoLoginMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeOAuthHandler) KakaoLoginCallCount() int {
	fake.kakaoLoginMutex.RLock()
	defer fake.kakaoLoginMutex.RUnlock()
	return len(fake.kakaoLoginArgsForCall)
}

func (fake *FakeOAuthHandler) KakaoLoginCalls(stub func(*fiber.Ctx) error) {
	fake.kakaoLoginMutex.Lock()
	defer fake.kakaoLoginMutex.Unlock()
	fake.KakaoLoginStub = stub
}

func (fake *FakeOAuthHandler) KakaoLoginArgsForCall(i int) *fiber.Ctx {
	fake.kakaoLoginMutex.RLock()
	defer fake.kakaoLoginMutex.RUnlock()
	argsForCall := fake.kakaoLoginArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeOAuthHandler) KakaoLoginReturns(result1 error) {
	fake.kakaoLoginMutex.Lock()
	defer fake.kakaoLoginMutex.Unlock()
	fake.KakaoLoginStub = nil
	fake.kakaoLoginReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeOAuthHandler) KakaoLoginReturnsOnCall(i int, result1 error) {
	fake.kakaoLoginMutex.Lock()
	defer fake.kakaoLoginMutex.Unlock()
	fake.KakaoLoginStub = nil
	if fake.kakaoLoginReturnsOnCall == nil {
		fake.kakaoLoginReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.kakaoLoginReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeOAuthHandler) Table() []handler.Mapper {
	fake.tableMutex.Lock()
	ret, specificReturn := fake.tableReturnsOnCall[len(fake.tableArgsForCall)]
	fake.tableArgsForCall = append(fake.tableArgsForCall, struct {
	}{})
	stub := fake.TableStub
	fakeReturns := fake.tableReturns
	fake.recordInvocation("Table", []interface{}{})
	fake.tableMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeOAuthHandler) TableCallCount() int {
	fake.tableMutex.RLock()
	defer fake.tableMutex.RUnlock()
	return len(fake.tableArgsForCall)
}

func (fake *FakeOAuthHandler) TableCalls(stub func() []handler.Mapper) {
	fake.tableMutex.Lock()
	defer fake.tableMutex.Unlock()
	fake.TableStub = stub
}

func (fake *FakeOAuthHandler) TableReturns(result1 []handler.Mapper) {
	fake.tableMutex.Lock()
	defer fake.tableMutex.Unlock()
	fake.TableStub = nil
	fake.tableReturns = struct {
		result1 []handler.Mapper
	}{result1}
}

func (fake *FakeOAuthHandler) TableReturnsOnCall(i int, result1 []handler.Mapper) {
	fake.tableMutex.Lock()
	defer fake.tableMutex.Unlock()
	fake.TableStub = nil
	if fake.tableReturnsOnCall == nil {
		fake.tableReturnsOnCall = make(map[int]struct {
			result1 []handler.Mapper
		})
	}
	fake.tableReturnsOnCall[i] = struct {
		result1 []handler.Mapper
	}{result1}
}

func (fake *FakeOAuthHandler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.githubCallbackMutex.RLock()
	defer fake.githubCallbackMutex.RUnlock()
	fake.githubLoginMutex.RLock()
	defer fake.githubLoginMutex.RUnlock()
	fake.googleCallbackMutex.RLock()
	defer fake.googleCallbackMutex.RUnlock()
	fake.googleLoginMutex.RLock()
	defer fake.googleLoginMutex.RUnlock()
	fake.kakaoCallbackMutex.RLock()
	defer fake.kakaoCallbackMutex.RUnlock()
	fake.kakaoLoginMutex.RLock()
	defer fake.kakaoLoginMutex.RUnlock()
	fake.tableMutex.RLock()
	defer fake.tableMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeOAuthHandler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ handler.OAuthHandler = new(FakeOAuthHandler)
