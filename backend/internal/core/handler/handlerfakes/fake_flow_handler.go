// Code generated by counterfeiter. DO NOT EDIT.
package handlerfakes

import (
	"sync"

	fiber "github.com/gofiber/fiber/v2"
	"github.com/kyh0703/flow/internal/core/handler"
)

type FakeFlowHandler struct {
	CreateOneStub        func(*fiber.Ctx) error
	createOneMutex       sync.RWMutex
	createOneArgsForCall []struct {
		arg1 *fiber.Ctx
	}
	createOneReturns struct {
		result1 error
	}
	createOneReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteOneStub        func(*fiber.Ctx) error
	deleteOneMutex       sync.RWMutex
	deleteOneArgsForCall []struct {
		arg1 *fiber.Ctx
	}
	deleteOneReturns struct {
		result1 error
	}
	deleteOneReturnsOnCall map[int]struct {
		result1 error
	}
	FindOneStub        func(*fiber.Ctx) error
	findOneMutex       sync.RWMutex
	findOneArgsForCall []struct {
		arg1 *fiber.Ctx
	}
	findOneReturns struct {
		result1 error
	}
	findOneReturnsOnCall map[int]struct {
		result1 error
	}
	RedoStub        func(*fiber.Ctx) error
	redoMutex       sync.RWMutex
	redoArgsForCall []struct {
		arg1 *fiber.Ctx
	}
	redoReturns struct {
		result1 error
	}
	redoReturnsOnCall map[int]struct {
		result1 error
	}
	TableStub        func() []handler.Mapper
	tableMutex       sync.RWMutex
	tableArgsForCall []struct {
	}
	tableReturns struct {
		result1 []handler.Mapper
	}
	tableReturnsOnCall map[int]struct {
		result1 []handler.Mapper
	}
	UndoStub        func(*fiber.Ctx) error
	undoMutex       sync.RWMutex
	undoArgsForCall []struct {
		arg1 *fiber.Ctx
	}
	undoReturns struct {
		result1 error
	}
	undoReturnsOnCall map[int]struct {
		result1 error
	}
	UpdateOneStub        func(*fiber.Ctx) error
	updateOneMutex       sync.RWMutex
	updateOneArgsForCall []struct {
		arg1 *fiber.Ctx
	}
	updateOneReturns struct {
		result1 error
	}
	updateOneReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFlowHandler) CreateOne(arg1 *fiber.Ctx) error {
	fake.createOneMutex.Lock()
	ret, specificReturn := fake.createOneReturnsOnCall[len(fake.createOneArgsForCall)]
	fake.createOneArgsForCall = append(fake.createOneArgsForCall, struct {
		arg1 *fiber.Ctx
	}{arg1})
	stub := fake.CreateOneStub
	fakeReturns := fake.createOneReturns
	fake.recordInvocation("CreateOne", []interface{}{arg1})
	fake.createOneMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeFlowHandler) CreateOneCallCount() int {
	fake.createOneMutex.RLock()
	defer fake.createOneMutex.RUnlock()
	return len(fake.createOneArgsForCall)
}

func (fake *FakeFlowHandler) CreateOneCalls(stub func(*fiber.Ctx) error) {
	fake.createOneMutex.Lock()
	defer fake.createOneMutex.Unlock()
	fake.CreateOneStub = stub
}

func (fake *FakeFlowHandler) CreateOneArgsForCall(i int) *fiber.Ctx {
	fake.createOneMutex.RLock()
	defer fake.createOneMutex.RUnlock()
	argsForCall := fake.createOneArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeFlowHandler) CreateOneReturns(result1 error) {
	fake.createOneMutex.Lock()
	defer fake.createOneMutex.Unlock()
	fake.CreateOneStub = nil
	fake.createOneReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeFlowHandler) CreateOneReturnsOnCall(i int, result1 error) {
	fake.createOneMutex.Lock()
	defer fake.createOneMutex.Unlock()
	fake.CreateOneStub = nil
	if fake.createOneReturnsOnCall == nil {
		fake.createOneReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createOneReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeFlowHandler) DeleteOne(arg1 *fiber.Ctx) error {
	fake.deleteOneMutex.Lock()
	ret, specificReturn := fake.deleteOneReturnsOnCall[len(fake.deleteOneArgsForCall)]
	fake.deleteOneArgsForCall = append(fake.deleteOneArgsForCall, struct {
		arg1 *fiber.Ctx
	}{arg1})
	stub := fake.DeleteOneStub
	fakeReturns := fake.deleteOneReturns
	fake.recordInvocation("DeleteOne", []interface{}{arg1})
	fake.deleteOneMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeFlowHandler) DeleteOneCallCount() int {
	fake.deleteOneMutex.RLock()
	defer fake.deleteOneMutex.RUnlock()
	return len(fake.deleteOneArgsForCall)
}

func (fake *FakeFlowHandler) DeleteOneCalls(stub func(*fiber.Ctx) error) {
	fake.deleteOneMutex.Lock()
	defer fake.deleteOneMutex.Unlock()
	fake.DeleteOneStub = stub
}

func (fake *FakeFlowHandler) DeleteOneArgsForCall(i int) *fiber.Ctx {
	fake.deleteOneMutex.RLock()
	defer fake.deleteOneMutex.RUnlock()
	argsForCall := fake.deleteOneArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeFlowHandler) DeleteOneReturns(result1 error) {
	fake.deleteOneMutex.Lock()
	defer fake.deleteOneMutex.Unlock()
	fake.DeleteOneStub = nil
	fake.deleteOneReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeFlowHandler) DeleteOneReturnsOnCall(i int, result1 error) {
	fake.deleteOneMutex.Lock()
	defer fake.deleteOneMutex.Unlock()
	fake.DeleteOneStub = nil
	if fake.deleteOneReturnsOnCall == nil {
		fake.deleteOneReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteOneReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeFlowHandler) FindOne(arg1 *fiber.Ctx) error {
	fake.findOneMutex.Lock()
	ret, specificReturn := fake.findOneReturnsOnCall[len(fake.findOneArgsForCall)]
	fake.findOneArgsForCall = append(fake.findOneArgsForCall, struct {
		arg1 *fiber.Ctx
	}{arg1})
	stub := fake.FindOneStub
	fakeReturns := fake.findOneReturns
	fake.recordInvocation("FindOne", []interface{}{arg1})
	fake.findOneMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeFlowHandler) FindOneCallCount() int {
	fake.findOneMutex.RLock()
	defer fake.findOneMutex.RUnlock()
	return len(fake.findOneArgsForCall)
}

func (fake *FakeFlowHandler) FindOneCalls(stub func(*fiber.Ctx) error) {
	fake.findOneMutex.Lock()
	defer fake.findOneMutex.Unlock()
	fake.FindOneStub = stub
}

func (fake *FakeFlowHandler) FindOneArgsForCall(i int) *fiber.Ctx {
	fake.findOneMutex.RLock()
	defer fake.findOneMutex.RUnlock()
	argsForCall := fake.findOneArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeFlowHandler) FindOneReturns(result1 error) {
	fake.findOneMutex.Lock()
	defer fake.findOneMutex.Unlock()
	fake.FindOneStub = nil
	fake.findOneReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeFlowHandler) FindOneReturnsOnCall(i int, result1 error) {
	fake.findOneMutex.Lock()
	defer fake.findOneMutex.Unlock()
	fake.FindOneStub = nil
	if fake.findOneReturnsOnCall == nil {
		fake.findOneReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.findOneReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeFlowHandler) Redo(arg1 *fiber.Ctx) error {
	fake.redoMutex.Lock()
	ret, specificReturn := fake.redoReturnsOnCall[len(fake.redoArgsForCall)]
	fake.redoArgsForCall = append(fake.redoArgsForCall, struct {
		arg1 *fiber.Ctx
	}{arg1})
	stub := fake.RedoStub
	fakeReturns := fake.redoReturns
	fake.recordInvocation("Redo", []interface{}{arg1})
	fake.redoMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeFlowHandler) RedoCallCount() int {
	fake.redoMutex.RLock()
	defer fake.redoMutex.RUnlock()
	return len(fake.redoArgsForCall)
}

func (fake *FakeFlowHandler) RedoCalls(stub func(*fiber.Ctx) error) {
	fake.redoMutex.Lock()
	defer fake.redoMutex.Unlock()
	fake.RedoStub = stub
}

func (fake *FakeFlowHandler) RedoArgsForCall(i int) *fiber.Ctx {
	fake.redoMutex.RLock()
	defer fake.redoMutex.RUnlock()
	argsForCall := fake.redoArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeFlowHandler) RedoReturns(result1 error) {
	fake.redoMutex.Lock()
	defer fake.redoMutex.Unlock()
	fake.RedoStub = nil
	fake.redoReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeFlowHandler) RedoReturnsOnCall(i int, result1 error) {
	fake.redoMutex.Lock()
	defer fake.redoMutex.Unlock()
	fake.RedoStub = nil
	if fake.redoReturnsOnCall == nil {
		fake.redoReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.redoReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeFlowHandler) Table() []handler.Mapper {
	fake.tableMutex.Lock()
	ret, specificReturn := fake.tableReturnsOnCall[len(fake.tableArgsForCall)]
	fake.tableArgsForCall = append(fake.tableArgsForCall, struct {
	}{})
	stub := fake.TableStub
	fakeReturns := fake.tableReturns
	fake.recordInvocation("Table", []interface{}{})
	fake.tableMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeFlowHandler) TableCallCount() int {
	fake.tableMutex.RLock()
	defer fake.tableMutex.RUnlock()
	return len(fake.tableArgsForCall)
}

func (fake *FakeFlowHandler) TableCalls(stub func() []handler.Mapper) {
	fake.tableMutex.Lock()
	defer fake.tableMutex.Unlock()
	fake.TableStub = stub
}

func (fake *FakeFlowHandler) TableReturns(result1 []handler.Mapper) {
	fake.tableMutex.Lock()
	defer fake.tableMutex.Unlock()
	fake.TableStub = nil
	fake.tableReturns = struct {
		result1 []handler.Mapper
	}{result1}
}

func (fake *FakeFlowHandler) TableReturnsOnCall(i int, result1 []handler.Mapper) {
	fake.tableMutex.Lock()
	defer fake.tableMutex.Unlock()
	fake.TableStub = nil
	if fake.tableReturnsOnCall == nil {
		fake.tableReturnsOnCall = make(map[int]struct {
			result1 []handler.Mapper
		})
	}
	fake.tableReturnsOnCall[i] = struct {
		result1 []handler.Mapper
	}{result1}
}

func (fake *FakeFlowHandler) Undo(arg1 *fiber.Ctx) error {
	fake.undoMutex.Lock()
	ret, specificReturn := fake.undoReturnsOnCall[len(fake.undoArgsForCall)]
	fake.undoArgsForCall = append(fake.undoArgsForCall, struct {
		arg1 *fiber.Ctx
	}{arg1})
	stub := fake.UndoStub
	fakeReturns := fake.undoReturns
	fake.recordInvocation("Undo", []interface{}{arg1})
	fake.undoMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeFlowHandler) UndoCallCount() int {
	fake.undoMutex.RLock()
	defer fake.undoMutex.RUnlock()
	return len(fake.undoArgsForCall)
}

func (fake *FakeFlowHandler) UndoCalls(stub func(*fiber.Ctx) error) {
	fake.undoMutex.Lock()
	defer fake.undoMutex.Unlock()
	fake.UndoStub = stub
}

func (fake *FakeFlowHandler) UndoArgsForCall(i int) *fiber.Ctx {
	fake.undoMutex.RLock()
	defer fake.undoMutex.RUnlock()
	argsForCall := fake.undoArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeFlowHandler) UndoReturns(result1 error) {
	fake.undoMutex.Lock()
	defer fake.undoMutex.Unlock()
	fake.UndoStub = nil
	fake.undoReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeFlowHandler) UndoReturnsOnCall(i int, result1 error) {
	fake.undoMutex.Lock()
	defer fake.undoMutex.Unlock()
	fake.UndoStub = nil
	if fake.undoReturnsOnCall == nil {
		fake.undoReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.undoReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeFlowHandler) UpdateOne(arg1 *fiber.Ctx) error {
	fake.updateOneMutex.Lock()
	ret, specificReturn := fake.updateOneReturnsOnCall[len(fake.updateOneArgsForCall)]
	fake.updateOneArgsForCall = append(fake.updateOneArgsForCall, struct {
		arg1 *fiber.Ctx
	}{arg1})
	stub := fake.UpdateOneStub
	fakeReturns := fake.updateOneReturns
	fake.recordInvocation("UpdateOne", []interface{}{arg1})
	fake.updateOneMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeFlowHandler) UpdateOneCallCount() int {
	fake.updateOneMutex.RLock()
	defer fake.updateOneMutex.RUnlock()
	return len(fake.updateOneArgsForCall)
}

func (fake *FakeFlowHandler) UpdateOneCalls(stub func(*fiber.Ctx) error) {
	fake.updateOneMutex.Lock()
	defer fake.updateOneMutex.Unlock()
	fake.UpdateOneStub = stub
}

func (fake *FakeFlowHandler) UpdateOneArgsForCall(i int) *fiber.Ctx {
	fake.updateOneMutex.RLock()
	defer fake.updateOneMutex.RUnlock()
	argsForCall := fake.updateOneArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeFlowHandler) UpdateOneReturns(result1 error) {
	fake.updateOneMutex.Lock()
	defer fake.updateOneMutex.Unlock()
	fake.UpdateOneStub = nil
	fake.updateOneReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeFlowHandler) UpdateOneReturnsOnCall(i int, result1 error) {
	fake.updateOneMutex.Lock()
	defer fake.updateOneMutex.Unlock()
	fake.UpdateOneStub = nil
	if fake.updateOneReturnsOnCall == nil {
		fake.updateOneReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateOneReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeFlowHandler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createOneMutex.RLock()
	defer fake.createOneMutex.RUnlock()
	fake.deleteOneMutex.RLock()
	defer fake.deleteOneMutex.RUnlock()
	fake.findOneMutex.RLock()
	defer fake.findOneMutex.RUnlock()
	fake.redoMutex.RLock()
	defer fake.redoMutex.RUnlock()
	fake.tableMutex.RLock()
	defer fake.tableMutex.RUnlock()
	fake.undoMutex.RLock()
	defer fake.undoMutex.RUnlock()
	fake.updateOneMutex.RLock()
	defer fake.updateOneMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeFlowHandler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ handler.FlowHandler = new(FakeFlowHandler)
