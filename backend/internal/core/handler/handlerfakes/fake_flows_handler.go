// Code generated by counterfeiter. DO NOT EDIT.
package handlerfakes

import (
	"sync"

	fiber "github.com/gofiber/fiber/v2"
	"github.com/kyh0703/flow/internal/core/handler"
)

type FakeFlowsHandler struct {
	CreateOneStub        func(*fiber.Ctx) error
	createOneMutex       sync.RWMutex
	createOneArgsForCall []struct {
		arg1 *fiber.Ctx
	}
	createOneReturns struct {
		result1 error
	}
	createOneReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteOneStub        func(*fiber.Ctx) error
	deleteOneMutex       sync.RWMutex
	deleteOneArgsForCall []struct {
		arg1 *fiber.Ctx
	}
	deleteOneReturns struct {
		result1 error
	}
	deleteOneReturnsOnCall map[int]struct {
		result1 error
	}
	FindOneStub        func(*fiber.Ctx) error
	findOneMutex       sync.RWMutex
	findOneArgsForCall []struct {
		arg1 *fiber.Ctx
	}
	findOneReturns struct {
		result1 error
	}
	findOneReturnsOnCall map[int]struct {
		result1 error
	}
	FindStructureStub        func(*fiber.Ctx) error
	findStructureMutex       sync.RWMutex
	findStructureArgsForCall []struct {
		arg1 *fiber.Ctx
	}
	findStructureReturns struct {
		result1 error
	}
	findStructureReturnsOnCall map[int]struct {
		result1 error
	}
	PaginationStub        func(*fiber.Ctx) error
	paginationMutex       sync.RWMutex
	paginationArgsForCall []struct {
		arg1 *fiber.Ctx
	}
	paginationReturns struct {
		result1 error
	}
	paginationReturnsOnCall map[int]struct {
		result1 error
	}
	TableStub        func() []handler.Mapper
	tableMutex       sync.RWMutex
	tableArgsForCall []struct {
	}
	tableReturns struct {
		result1 []handler.Mapper
	}
	tableReturnsOnCall map[int]struct {
		result1 []handler.Mapper
	}
	UpdateOneStub        func(*fiber.Ctx) error
	updateOneMutex       sync.RWMutex
	updateOneArgsForCall []struct {
		arg1 *fiber.Ctx
	}
	updateOneReturns struct {
		result1 error
	}
	updateOneReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFlowsHandler) CreateOne(arg1 *fiber.Ctx) error {
	fake.createOneMutex.Lock()
	ret, specificReturn := fake.createOneReturnsOnCall[len(fake.createOneArgsForCall)]
	fake.createOneArgsForCall = append(fake.createOneArgsForCall, struct {
		arg1 *fiber.Ctx
	}{arg1})
	stub := fake.CreateOneStub
	fakeReturns := fake.createOneReturns
	fake.recordInvocation("CreateOne", []interface{}{arg1})
	fake.createOneMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeFlowsHandler) CreateOneCallCount() int {
	fake.createOneMutex.RLock()
	defer fake.createOneMutex.RUnlock()
	return len(fake.createOneArgsForCall)
}

func (fake *FakeFlowsHandler) CreateOneCalls(stub func(*fiber.Ctx) error) {
	fake.createOneMutex.Lock()
	defer fake.createOneMutex.Unlock()
	fake.CreateOneStub = stub
}

func (fake *FakeFlowsHandler) CreateOneArgsForCall(i int) *fiber.Ctx {
	fake.createOneMutex.RLock()
	defer fake.createOneMutex.RUnlock()
	argsForCall := fake.createOneArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeFlowsHandler) CreateOneReturns(result1 error) {
	fake.createOneMutex.Lock()
	defer fake.createOneMutex.Unlock()
	fake.CreateOneStub = nil
	fake.createOneReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeFlowsHandler) CreateOneReturnsOnCall(i int, result1 error) {
	fake.createOneMutex.Lock()
	defer fake.createOneMutex.Unlock()
	fake.CreateOneStub = nil
	if fake.createOneReturnsOnCall == nil {
		fake.createOneReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createOneReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeFlowsHandler) DeleteOne(arg1 *fiber.Ctx) error {
	fake.deleteOneMutex.Lock()
	ret, specificReturn := fake.deleteOneReturnsOnCall[len(fake.deleteOneArgsForCall)]
	fake.deleteOneArgsForCall = append(fake.deleteOneArgsForCall, struct {
		arg1 *fiber.Ctx
	}{arg1})
	stub := fake.DeleteOneStub
	fakeReturns := fake.deleteOneReturns
	fake.recordInvocation("DeleteOne", []interface{}{arg1})
	fake.deleteOneMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeFlowsHandler) DeleteOneCallCount() int {
	fake.deleteOneMutex.RLock()
	defer fake.deleteOneMutex.RUnlock()
	return len(fake.deleteOneArgsForCall)
}

func (fake *FakeFlowsHandler) DeleteOneCalls(stub func(*fiber.Ctx) error) {
	fake.deleteOneMutex.Lock()
	defer fake.deleteOneMutex.Unlock()
	fake.DeleteOneStub = stub
}

func (fake *FakeFlowsHandler) DeleteOneArgsForCall(i int) *fiber.Ctx {
	fake.deleteOneMutex.RLock()
	defer fake.deleteOneMutex.RUnlock()
	argsForCall := fake.deleteOneArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeFlowsHandler) DeleteOneReturns(result1 error) {
	fake.deleteOneMutex.Lock()
	defer fake.deleteOneMutex.Unlock()
	fake.DeleteOneStub = nil
	fake.deleteOneReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeFlowsHandler) DeleteOneReturnsOnCall(i int, result1 error) {
	fake.deleteOneMutex.Lock()
	defer fake.deleteOneMutex.Unlock()
	fake.DeleteOneStub = nil
	if fake.deleteOneReturnsOnCall == nil {
		fake.deleteOneReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteOneReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeFlowsHandler) FindOne(arg1 *fiber.Ctx) error {
	fake.findOneMutex.Lock()
	ret, specificReturn := fake.findOneReturnsOnCall[len(fake.findOneArgsForCall)]
	fake.findOneArgsForCall = append(fake.findOneArgsForCall, struct {
		arg1 *fiber.Ctx
	}{arg1})
	stub := fake.FindOneStub
	fakeReturns := fake.findOneReturns
	fake.recordInvocation("FindOne", []interface{}{arg1})
	fake.findOneMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeFlowsHandler) FindOneCallCount() int {
	fake.findOneMutex.RLock()
	defer fake.findOneMutex.RUnlock()
	return len(fake.findOneArgsForCall)
}

func (fake *FakeFlowsHandler) FindOneCalls(stub func(*fiber.Ctx) error) {
	fake.findOneMutex.Lock()
	defer fake.findOneMutex.Unlock()
	fake.FindOneStub = stub
}

func (fake *FakeFlowsHandler) FindOneArgsForCall(i int) *fiber.Ctx {
	fake.findOneMutex.RLock()
	defer fake.findOneMutex.RUnlock()
	argsForCall := fake.findOneArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeFlowsHandler) FindOneReturns(result1 error) {
	fake.findOneMutex.Lock()
	defer fake.findOneMutex.Unlock()
	fake.FindOneStub = nil
	fake.findOneReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeFlowsHandler) FindOneReturnsOnCall(i int, result1 error) {
	fake.findOneMutex.Lock()
	defer fake.findOneMutex.Unlock()
	fake.FindOneStub = nil
	if fake.findOneReturnsOnCall == nil {
		fake.findOneReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.findOneReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeFlowsHandler) FindStructure(arg1 *fiber.Ctx) error {
	fake.findStructureMutex.Lock()
	ret, specificReturn := fake.findStructureReturnsOnCall[len(fake.findStructureArgsForCall)]
	fake.findStructureArgsForCall = append(fake.findStructureArgsForCall, struct {
		arg1 *fiber.Ctx
	}{arg1})
	stub := fake.FindStructureStub
	fakeReturns := fake.findStructureReturns
	fake.recordInvocation("FindStructure", []interface{}{arg1})
	fake.findStructureMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeFlowsHandler) FindStructureCallCount() int {
	fake.findStructureMutex.RLock()
	defer fake.findStructureMutex.RUnlock()
	return len(fake.findStructureArgsForCall)
}

func (fake *FakeFlowsHandler) FindStructureCalls(stub func(*fiber.Ctx) error) {
	fake.findStructureMutex.Lock()
	defer fake.findStructureMutex.Unlock()
	fake.FindStructureStub = stub
}

func (fake *FakeFlowsHandler) FindStructureArgsForCall(i int) *fiber.Ctx {
	fake.findStructureMutex.RLock()
	defer fake.findStructureMutex.RUnlock()
	argsForCall := fake.findStructureArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeFlowsHandler) FindStructureReturns(result1 error) {
	fake.findStructureMutex.Lock()
	defer fake.findStructureMutex.Unlock()
	fake.FindStructureStub = nil
	fake.findStructureReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeFlowsHandler) FindStructureReturnsOnCall(i int, result1 error) {
	fake.findStructureMutex.Lock()
	defer fake.findStructureMutex.Unlock()
	fake.FindStructureStub = nil
	if fake.findStructureReturnsOnCall == nil {
		fake.findStructureReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.findStructureReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeFlowsHandler) Pagination(arg1 *fiber.Ctx) error {
	fake.paginationMutex.Lock()
	ret, specificReturn := fake.paginationReturnsOnCall[len(fake.paginationArgsForCall)]
	fake.paginationArgsForCall = append(fake.paginationArgsForCall, struct {
		arg1 *fiber.Ctx
	}{arg1})
	stub := fake.PaginationStub
	fakeReturns := fake.paginationReturns
	fake.recordInvocation("Pagination", []interface{}{arg1})
	fake.paginationMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeFlowsHandler) PaginationCallCount() int {
	fake.paginationMutex.RLock()
	defer fake.paginationMutex.RUnlock()
	return len(fake.paginationArgsForCall)
}

func (fake *FakeFlowsHandler) PaginationCalls(stub func(*fiber.Ctx) error) {
	fake.paginationMutex.Lock()
	defer fake.paginationMutex.Unlock()
	fake.PaginationStub = stub
}

func (fake *FakeFlowsHandler) PaginationArgsForCall(i int) *fiber.Ctx {
	fake.paginationMutex.RLock()
	defer fake.paginationMutex.RUnlock()
	argsForCall := fake.paginationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeFlowsHandler) PaginationReturns(result1 error) {
	fake.paginationMutex.Lock()
	defer fake.paginationMutex.Unlock()
	fake.PaginationStub = nil
	fake.paginationReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeFlowsHandler) PaginationReturnsOnCall(i int, result1 error) {
	fake.paginationMutex.Lock()
	defer fake.paginationMutex.Unlock()
	fake.PaginationStub = nil
	if fake.paginationReturnsOnCall == nil {
		fake.paginationReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.paginationReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeFlowsHandler) Table() []handler.Mapper {
	fake.tableMutex.Lock()
	ret, specificReturn := fake.tableReturnsOnCall[len(fake.tableArgsForCall)]
	fake.tableArgsForCall = append(fake.tableArgsForCall, struct {
	}{})
	stub := fake.TableStub
	fakeReturns := fake.tableReturns
	fake.recordInvocation("Table", []interface{}{})
	fake.tableMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeFlowsHandler) TableCallCount() int {
	fake.tableMutex.RLock()
	defer fake.tableMutex.RUnlock()
	return len(fake.tableArgsForCall)
}

func (fake *FakeFlowsHandler) TableCalls(stub func() []handler.Mapper) {
	fake.tableMutex.Lock()
	defer fake.tableMutex.Unlock()
	fake.TableStub = stub
}

func (fake *FakeFlowsHandler) TableReturns(result1 []handler.Mapper) {
	fake.tableMutex.Lock()
	defer fake.tableMutex.Unlock()
	fake.TableStub = nil
	fake.tableReturns = struct {
		result1 []handler.Mapper
	}{result1}
}

func (fake *FakeFlowsHandler) TableReturnsOnCall(i int, result1 []handler.Mapper) {
	fake.tableMutex.Lock()
	defer fake.tableMutex.Unlock()
	fake.TableStub = nil
	if fake.tableReturnsOnCall == nil {
		fake.tableReturnsOnCall = make(map[int]struct {
			result1 []handler.Mapper
		})
	}
	fake.tableReturnsOnCall[i] = struct {
		result1 []handler.Mapper
	}{result1}
}

func (fake *FakeFlowsHandler) UpdateOne(arg1 *fiber.Ctx) error {
	fake.updateOneMutex.Lock()
	ret, specificReturn := fake.updateOneReturnsOnCall[len(fake.updateOneArgsForCall)]
	fake.updateOneArgsForCall = append(fake.updateOneArgsForCall, struct {
		arg1 *fiber.Ctx
	}{arg1})
	stub := fake.UpdateOneStub
	fakeReturns := fake.updateOneReturns
	fake.recordInvocation("UpdateOne", []interface{}{arg1})
	fake.updateOneMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeFlowsHandler) UpdateOneCallCount() int {
	fake.updateOneMutex.RLock()
	defer fake.updateOneMutex.RUnlock()
	return len(fake.updateOneArgsForCall)
}

func (fake *FakeFlowsHandler) UpdateOneCalls(stub func(*fiber.Ctx) error) {
	fake.updateOneMutex.Lock()
	defer fake.updateOneMutex.Unlock()
	fake.UpdateOneStub = stub
}

func (fake *FakeFlowsHandler) UpdateOneArgsForCall(i int) *fiber.Ctx {
	fake.updateOneMutex.RLock()
	defer fake.updateOneMutex.RUnlock()
	argsForCall := fake.updateOneArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeFlowsHandler) UpdateOneReturns(result1 error) {
	fake.updateOneMutex.Lock()
	defer fake.updateOneMutex.Unlock()
	fake.UpdateOneStub = nil
	fake.updateOneReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeFlowsHandler) UpdateOneReturnsOnCall(i int, result1 error) {
	fake.updateOneMutex.Lock()
	defer fake.updateOneMutex.Unlock()
	fake.UpdateOneStub = nil
	if fake.updateOneReturnsOnCall == nil {
		fake.updateOneReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateOneReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeFlowsHandler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createOneMutex.RLock()
	defer fake.createOneMutex.RUnlock()
	fake.deleteOneMutex.RLock()
	defer fake.deleteOneMutex.RUnlock()
	fake.findOneMutex.RLock()
	defer fake.findOneMutex.RUnlock()
	fake.findStructureMutex.RLock()
	defer fake.findStructureMutex.RUnlock()
	fake.paginationMutex.RLock()
	defer fake.paginationMutex.RUnlock()
	fake.tableMutex.RLock()
	defer fake.tableMutex.RUnlock()
	fake.updateOneMutex.RLock()
	defer fake.updateOneMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeFlowsHandler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ handler.FlowsHandler = new(FakeFlowsHandler)
