// Code generated by counterfeiter. DO NOT EDIT.
package repositoryfakes

import (
	"context"
	"sync"

	"github.com/kyh0703/flow/internal/core/domain/model"
	"github.com/kyh0703/flow/internal/core/domain/repository"
)

type FakeEdgesRepository struct {
	CreateAllStub        func(context.Context, []model.CreateEdgeParams) ([]model.Edge, error)
	createAllMutex       sync.RWMutex
	createAllArgsForCall []struct {
		arg1 context.Context
		arg2 []model.CreateEdgeParams
	}
	createAllReturns struct {
		result1 []model.Edge
		result2 error
	}
	createAllReturnsOnCall map[int]struct {
		result1 []model.Edge
		result2 error
	}
	DeleteAllStub        func(context.Context, []int64) error
	deleteAllMutex       sync.RWMutex
	deleteAllArgsForCall []struct {
		arg1 context.Context
		arg2 []int64
	}
	deleteAllReturns struct {
		result1 error
	}
	deleteAllReturnsOnCall map[int]struct {
		result1 error
	}
	FindByFlowIDStub        func(context.Context, int64) ([]model.Edge, error)
	findByFlowIDMutex       sync.RWMutex
	findByFlowIDArgsForCall []struct {
		arg1 context.Context
		arg2 int64
	}
	findByFlowIDReturns struct {
		result1 []model.Edge
		result2 error
	}
	findByFlowIDReturnsOnCall map[int]struct {
		result1 []model.Edge
		result2 error
	}
	FindByIDStub        func(context.Context, int64) (model.Edge, error)
	findByIDMutex       sync.RWMutex
	findByIDArgsForCall []struct {
		arg1 context.Context
		arg2 int64
	}
	findByIDReturns struct {
		result1 model.Edge
		result2 error
	}
	findByIDReturnsOnCall map[int]struct {
		result1 model.Edge
		result2 error
	}
	UpdateAllStub        func(context.Context, []model.PatchEdgeParams) error
	updateAllMutex       sync.RWMutex
	updateAllArgsForCall []struct {
		arg1 context.Context
		arg2 []model.PatchEdgeParams
	}
	updateAllReturns struct {
		result1 error
	}
	updateAllReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeEdgesRepository) CreateAll(arg1 context.Context, arg2 []model.CreateEdgeParams) ([]model.Edge, error) {
	var arg2Copy []model.CreateEdgeParams
	if arg2 != nil {
		arg2Copy = make([]model.CreateEdgeParams, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.createAllMutex.Lock()
	ret, specificReturn := fake.createAllReturnsOnCall[len(fake.createAllArgsForCall)]
	fake.createAllArgsForCall = append(fake.createAllArgsForCall, struct {
		arg1 context.Context
		arg2 []model.CreateEdgeParams
	}{arg1, arg2Copy})
	stub := fake.CreateAllStub
	fakeReturns := fake.createAllReturns
	fake.recordInvocation("CreateAll", []interface{}{arg1, arg2Copy})
	fake.createAllMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEdgesRepository) CreateAllCallCount() int {
	fake.createAllMutex.RLock()
	defer fake.createAllMutex.RUnlock()
	return len(fake.createAllArgsForCall)
}

func (fake *FakeEdgesRepository) CreateAllCalls(stub func(context.Context, []model.CreateEdgeParams) ([]model.Edge, error)) {
	fake.createAllMutex.Lock()
	defer fake.createAllMutex.Unlock()
	fake.CreateAllStub = stub
}

func (fake *FakeEdgesRepository) CreateAllArgsForCall(i int) (context.Context, []model.CreateEdgeParams) {
	fake.createAllMutex.RLock()
	defer fake.createAllMutex.RUnlock()
	argsForCall := fake.createAllArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeEdgesRepository) CreateAllReturns(result1 []model.Edge, result2 error) {
	fake.createAllMutex.Lock()
	defer fake.createAllMutex.Unlock()
	fake.CreateAllStub = nil
	fake.createAllReturns = struct {
		result1 []model.Edge
		result2 error
	}{result1, result2}
}

func (fake *FakeEdgesRepository) CreateAllReturnsOnCall(i int, result1 []model.Edge, result2 error) {
	fake.createAllMutex.Lock()
	defer fake.createAllMutex.Unlock()
	fake.CreateAllStub = nil
	if fake.createAllReturnsOnCall == nil {
		fake.createAllReturnsOnCall = make(map[int]struct {
			result1 []model.Edge
			result2 error
		})
	}
	fake.createAllReturnsOnCall[i] = struct {
		result1 []model.Edge
		result2 error
	}{result1, result2}
}

func (fake *FakeEdgesRepository) DeleteAll(arg1 context.Context, arg2 []int64) error {
	var arg2Copy []int64
	if arg2 != nil {
		arg2Copy = make([]int64, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.deleteAllMutex.Lock()
	ret, specificReturn := fake.deleteAllReturnsOnCall[len(fake.deleteAllArgsForCall)]
	fake.deleteAllArgsForCall = append(fake.deleteAllArgsForCall, struct {
		arg1 context.Context
		arg2 []int64
	}{arg1, arg2Copy})
	stub := fake.DeleteAllStub
	fakeReturns := fake.deleteAllReturns
	fake.recordInvocation("DeleteAll", []interface{}{arg1, arg2Copy})
	fake.deleteAllMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeEdgesRepository) DeleteAllCallCount() int {
	fake.deleteAllMutex.RLock()
	defer fake.deleteAllMutex.RUnlock()
	return len(fake.deleteAllArgsForCall)
}

func (fake *FakeEdgesRepository) DeleteAllCalls(stub func(context.Context, []int64) error) {
	fake.deleteAllMutex.Lock()
	defer fake.deleteAllMutex.Unlock()
	fake.DeleteAllStub = stub
}

func (fake *FakeEdgesRepository) DeleteAllArgsForCall(i int) (context.Context, []int64) {
	fake.deleteAllMutex.RLock()
	defer fake.deleteAllMutex.RUnlock()
	argsForCall := fake.deleteAllArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeEdgesRepository) DeleteAllReturns(result1 error) {
	fake.deleteAllMutex.Lock()
	defer fake.deleteAllMutex.Unlock()
	fake.DeleteAllStub = nil
	fake.deleteAllReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEdgesRepository) DeleteAllReturnsOnCall(i int, result1 error) {
	fake.deleteAllMutex.Lock()
	defer fake.deleteAllMutex.Unlock()
	fake.DeleteAllStub = nil
	if fake.deleteAllReturnsOnCall == nil {
		fake.deleteAllReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteAllReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEdgesRepository) FindByFlowID(arg1 context.Context, arg2 int64) ([]model.Edge, error) {
	fake.findByFlowIDMutex.Lock()
	ret, specificReturn := fake.findByFlowIDReturnsOnCall[len(fake.findByFlowIDArgsForCall)]
	fake.findByFlowIDArgsForCall = append(fake.findByFlowIDArgsForCall, struct {
		arg1 context.Context
		arg2 int64
	}{arg1, arg2})
	stub := fake.FindByFlowIDStub
	fakeReturns := fake.findByFlowIDReturns
	fake.recordInvocation("FindByFlowID", []interface{}{arg1, arg2})
	fake.findByFlowIDMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEdgesRepository) FindByFlowIDCallCount() int {
	fake.findByFlowIDMutex.RLock()
	defer fake.findByFlowIDMutex.RUnlock()
	return len(fake.findByFlowIDArgsForCall)
}

func (fake *FakeEdgesRepository) FindByFlowIDCalls(stub func(context.Context, int64) ([]model.Edge, error)) {
	fake.findByFlowIDMutex.Lock()
	defer fake.findByFlowIDMutex.Unlock()
	fake.FindByFlowIDStub = stub
}

func (fake *FakeEdgesRepository) FindByFlowIDArgsForCall(i int) (context.Context, int64) {
	fake.findByFlowIDMutex.RLock()
	defer fake.findByFlowIDMutex.RUnlock()
	argsForCall := fake.findByFlowIDArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeEdgesRepository) FindByFlowIDReturns(result1 []model.Edge, result2 error) {
	fake.findByFlowIDMutex.Lock()
	defer fake.findByFlowIDMutex.Unlock()
	fake.FindByFlowIDStub = nil
	fake.findByFlowIDReturns = struct {
		result1 []model.Edge
		result2 error
	}{result1, result2}
}

func (fake *FakeEdgesRepository) FindByFlowIDReturnsOnCall(i int, result1 []model.Edge, result2 error) {
	fake.findByFlowIDMutex.Lock()
	defer fake.findByFlowIDMutex.Unlock()
	fake.FindByFlowIDStub = nil
	if fake.findByFlowIDReturnsOnCall == nil {
		fake.findByFlowIDReturnsOnCall = make(map[int]struct {
			result1 []model.Edge
			result2 error
		})
	}
	fake.findByFlowIDReturnsOnCall[i] = struct {
		result1 []model.Edge
		result2 error
	}{result1, result2}
}

func (fake *FakeEdgesRepository) FindByID(arg1 context.Context, arg2 int64) (model.Edge, error) {
	fake.findByIDMutex.Lock()
	ret, specificReturn := fake.findByIDReturnsOnCall[len(fake.findByIDArgsForCall)]
	fake.findByIDArgsForCall = append(fake.findByIDArgsForCall, struct {
		arg1 context.Context
		arg2 int64
	}{arg1, arg2})
	stub := fake.FindByIDStub
	fakeReturns := fake.findByIDReturns
	fake.recordInvocation("FindByID", []interface{}{arg1, arg2})
	fake.findByIDMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEdgesRepository) FindByIDCallCount() int {
	fake.findByIDMutex.RLock()
	defer fake.findByIDMutex.RUnlock()
	return len(fake.findByIDArgsForCall)
}

func (fake *FakeEdgesRepository) FindByIDCalls(stub func(context.Context, int64) (model.Edge, error)) {
	fake.findByIDMutex.Lock()
	defer fake.findByIDMutex.Unlock()
	fake.FindByIDStub = stub
}

func (fake *FakeEdgesRepository) FindByIDArgsForCall(i int) (context.Context, int64) {
	fake.findByIDMutex.RLock()
	defer fake.findByIDMutex.RUnlock()
	argsForCall := fake.findByIDArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeEdgesRepository) FindByIDReturns(result1 model.Edge, result2 error) {
	fake.findByIDMutex.Lock()
	defer fake.findByIDMutex.Unlock()
	fake.FindByIDStub = nil
	fake.findByIDReturns = struct {
		result1 model.Edge
		result2 error
	}{result1, result2}
}

func (fake *FakeEdgesRepository) FindByIDReturnsOnCall(i int, result1 model.Edge, result2 error) {
	fake.findByIDMutex.Lock()
	defer fake.findByIDMutex.Unlock()
	fake.FindByIDStub = nil
	if fake.findByIDReturnsOnCall == nil {
		fake.findByIDReturnsOnCall = make(map[int]struct {
			result1 model.Edge
			result2 error
		})
	}
	fake.findByIDReturnsOnCall[i] = struct {
		result1 model.Edge
		result2 error
	}{result1, result2}
}

func (fake *FakeEdgesRepository) UpdateAll(arg1 context.Context, arg2 []model.PatchEdgeParams) error {
	var arg2Copy []model.PatchEdgeParams
	if arg2 != nil {
		arg2Copy = make([]model.PatchEdgeParams, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.updateAllMutex.Lock()
	ret, specificReturn := fake.updateAllReturnsOnCall[len(fake.updateAllArgsForCall)]
	fake.updateAllArgsForCall = append(fake.updateAllArgsForCall, struct {
		arg1 context.Context
		arg2 []model.PatchEdgeParams
	}{arg1, arg2Copy})
	stub := fake.UpdateAllStub
	fakeReturns := fake.updateAllReturns
	fake.recordInvocation("UpdateAll", []interface{}{arg1, arg2Copy})
	fake.updateAllMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeEdgesRepository) UpdateAllCallCount() int {
	fake.updateAllMutex.RLock()
	defer fake.updateAllMutex.RUnlock()
	return len(fake.updateAllArgsForCall)
}

func (fake *FakeEdgesRepository) UpdateAllCalls(stub func(context.Context, []model.PatchEdgeParams) error) {
	fake.updateAllMutex.Lock()
	defer fake.updateAllMutex.Unlock()
	fake.UpdateAllStub = stub
}

func (fake *FakeEdgesRepository) UpdateAllArgsForCall(i int) (context.Context, []model.PatchEdgeParams) {
	fake.updateAllMutex.RLock()
	defer fake.updateAllMutex.RUnlock()
	argsForCall := fake.updateAllArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeEdgesRepository) UpdateAllReturns(result1 error) {
	fake.updateAllMutex.Lock()
	defer fake.updateAllMutex.Unlock()
	fake.UpdateAllStub = nil
	fake.updateAllReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEdgesRepository) UpdateAllReturnsOnCall(i int, result1 error) {
	fake.updateAllMutex.Lock()
	defer fake.updateAllMutex.Unlock()
	fake.UpdateAllStub = nil
	if fake.updateAllReturnsOnCall == nil {
		fake.updateAllReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateAllReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEdgesRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createAllMutex.RLock()
	defer fake.createAllMutex.RUnlock()
	fake.deleteAllMutex.RLock()
	defer fake.deleteAllMutex.RUnlock()
	fake.findByFlowIDMutex.RLock()
	defer fake.findByFlowIDMutex.RUnlock()
	fake.findByIDMutex.RLock()
	defer fake.findByIDMutex.RUnlock()
	fake.updateAllMutex.RLock()
	defer fake.updateAllMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeEdgesRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ repository.EdgesRepository = new(FakeEdgesRepository)
