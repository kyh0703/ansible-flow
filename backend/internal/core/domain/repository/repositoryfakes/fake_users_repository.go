// Code generated by counterfeiter. DO NOT EDIT.
package repositoryfakes

import (
	"context"
	"sync"

	"github.com/kyh0703/flow/internal/core/domain/model"
	"github.com/kyh0703/flow/internal/core/domain/repository"
)

type FakeUsersRepository struct {
	CreateOneStub        func(context.Context, model.CreateUserParams) (model.User, error)
	createOneMutex       sync.RWMutex
	createOneArgsForCall []struct {
		arg1 context.Context
		arg2 model.CreateUserParams
	}
	createOneReturns struct {
		result1 model.User
		result2 error
	}
	createOneReturnsOnCall map[int]struct {
		result1 model.User
		result2 error
	}
	DeleteOneStub        func(context.Context, int64) error
	deleteOneMutex       sync.RWMutex
	deleteOneArgsForCall []struct {
		arg1 context.Context
		arg2 int64
	}
	deleteOneReturns struct {
		result1 error
	}
	deleteOneReturnsOnCall map[int]struct {
		result1 error
	}
	FindByEmailStub        func(context.Context, string) (model.User, error)
	findByEmailMutex       sync.RWMutex
	findByEmailArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	findByEmailReturns struct {
		result1 model.User
		result2 error
	}
	findByEmailReturnsOnCall map[int]struct {
		result1 model.User
		result2 error
	}
	FindByIDStub        func(context.Context, int64) (model.User, error)
	findByIDMutex       sync.RWMutex
	findByIDArgsForCall []struct {
		arg1 context.Context
		arg2 int64
	}
	findByIDReturns struct {
		result1 model.User
		result2 error
	}
	findByIDReturnsOnCall map[int]struct {
		result1 model.User
		result2 error
	}
	UpdateOneStub        func(context.Context, model.UpdateUserParams) error
	updateOneMutex       sync.RWMutex
	updateOneArgsForCall []struct {
		arg1 context.Context
		arg2 model.UpdateUserParams
	}
	updateOneReturns struct {
		result1 error
	}
	updateOneReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeUsersRepository) CreateOne(arg1 context.Context, arg2 model.CreateUserParams) (model.User, error) {
	fake.createOneMutex.Lock()
	ret, specificReturn := fake.createOneReturnsOnCall[len(fake.createOneArgsForCall)]
	fake.createOneArgsForCall = append(fake.createOneArgsForCall, struct {
		arg1 context.Context
		arg2 model.CreateUserParams
	}{arg1, arg2})
	stub := fake.CreateOneStub
	fakeReturns := fake.createOneReturns
	fake.recordInvocation("CreateOne", []interface{}{arg1, arg2})
	fake.createOneMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeUsersRepository) CreateOneCallCount() int {
	fake.createOneMutex.RLock()
	defer fake.createOneMutex.RUnlock()
	return len(fake.createOneArgsForCall)
}

func (fake *FakeUsersRepository) CreateOneCalls(stub func(context.Context, model.CreateUserParams) (model.User, error)) {
	fake.createOneMutex.Lock()
	defer fake.createOneMutex.Unlock()
	fake.CreateOneStub = stub
}

func (fake *FakeUsersRepository) CreateOneArgsForCall(i int) (context.Context, model.CreateUserParams) {
	fake.createOneMutex.RLock()
	defer fake.createOneMutex.RUnlock()
	argsForCall := fake.createOneArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeUsersRepository) CreateOneReturns(result1 model.User, result2 error) {
	fake.createOneMutex.Lock()
	defer fake.createOneMutex.Unlock()
	fake.CreateOneStub = nil
	fake.createOneReturns = struct {
		result1 model.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUsersRepository) CreateOneReturnsOnCall(i int, result1 model.User, result2 error) {
	fake.createOneMutex.Lock()
	defer fake.createOneMutex.Unlock()
	fake.CreateOneStub = nil
	if fake.createOneReturnsOnCall == nil {
		fake.createOneReturnsOnCall = make(map[int]struct {
			result1 model.User
			result2 error
		})
	}
	fake.createOneReturnsOnCall[i] = struct {
		result1 model.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUsersRepository) DeleteOne(arg1 context.Context, arg2 int64) error {
	fake.deleteOneMutex.Lock()
	ret, specificReturn := fake.deleteOneReturnsOnCall[len(fake.deleteOneArgsForCall)]
	fake.deleteOneArgsForCall = append(fake.deleteOneArgsForCall, struct {
		arg1 context.Context
		arg2 int64
	}{arg1, arg2})
	stub := fake.DeleteOneStub
	fakeReturns := fake.deleteOneReturns
	fake.recordInvocation("DeleteOne", []interface{}{arg1, arg2})
	fake.deleteOneMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeUsersRepository) DeleteOneCallCount() int {
	fake.deleteOneMutex.RLock()
	defer fake.deleteOneMutex.RUnlock()
	return len(fake.deleteOneArgsForCall)
}

func (fake *FakeUsersRepository) DeleteOneCalls(stub func(context.Context, int64) error) {
	fake.deleteOneMutex.Lock()
	defer fake.deleteOneMutex.Unlock()
	fake.DeleteOneStub = stub
}

func (fake *FakeUsersRepository) DeleteOneArgsForCall(i int) (context.Context, int64) {
	fake.deleteOneMutex.RLock()
	defer fake.deleteOneMutex.RUnlock()
	argsForCall := fake.deleteOneArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeUsersRepository) DeleteOneReturns(result1 error) {
	fake.deleteOneMutex.Lock()
	defer fake.deleteOneMutex.Unlock()
	fake.DeleteOneStub = nil
	fake.deleteOneReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUsersRepository) DeleteOneReturnsOnCall(i int, result1 error) {
	fake.deleteOneMutex.Lock()
	defer fake.deleteOneMutex.Unlock()
	fake.DeleteOneStub = nil
	if fake.deleteOneReturnsOnCall == nil {
		fake.deleteOneReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteOneReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeUsersRepository) FindByEmail(arg1 context.Context, arg2 string) (model.User, error) {
	fake.findByEmailMutex.Lock()
	ret, specificReturn := fake.findByEmailReturnsOnCall[len(fake.findByEmailArgsForCall)]
	fake.findByEmailArgsForCall = append(fake.findByEmailArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.FindByEmailStub
	fakeReturns := fake.findByEmailReturns
	fake.recordInvocation("FindByEmail", []interface{}{arg1, arg2})
	fake.findByEmailMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeUsersRepository) FindByEmailCallCount() int {
	fake.findByEmailMutex.RLock()
	defer fake.findByEmailMutex.RUnlock()
	return len(fake.findByEmailArgsForCall)
}

func (fake *FakeUsersRepository) FindByEmailCalls(stub func(context.Context, string) (model.User, error)) {
	fake.findByEmailMutex.Lock()
	defer fake.findByEmailMutex.Unlock()
	fake.FindByEmailStub = stub
}

func (fake *FakeUsersRepository) FindByEmailArgsForCall(i int) (context.Context, string) {
	fake.findByEmailMutex.RLock()
	defer fake.findByEmailMutex.RUnlock()
	argsForCall := fake.findByEmailArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeUsersRepository) FindByEmailReturns(result1 model.User, result2 error) {
	fake.findByEmailMutex.Lock()
	defer fake.findByEmailMutex.Unlock()
	fake.FindByEmailStub = nil
	fake.findByEmailReturns = struct {
		result1 model.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUsersRepository) FindByEmailReturnsOnCall(i int, result1 model.User, result2 error) {
	fake.findByEmailMutex.Lock()
	defer fake.findByEmailMutex.Unlock()
	fake.FindByEmailStub = nil
	if fake.findByEmailReturnsOnCall == nil {
		fake.findByEmailReturnsOnCall = make(map[int]struct {
			result1 model.User
			result2 error
		})
	}
	fake.findByEmailReturnsOnCall[i] = struct {
		result1 model.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUsersRepository) FindByID(arg1 context.Context, arg2 int64) (model.User, error) {
	fake.findByIDMutex.Lock()
	ret, specificReturn := fake.findByIDReturnsOnCall[len(fake.findByIDArgsForCall)]
	fake.findByIDArgsForCall = append(fake.findByIDArgsForCall, struct {
		arg1 context.Context
		arg2 int64
	}{arg1, arg2})
	stub := fake.FindByIDStub
	fakeReturns := fake.findByIDReturns
	fake.recordInvocation("FindByID", []interface{}{arg1, arg2})
	fake.findByIDMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeUsersRepository) FindByIDCallCount() int {
	fake.findByIDMutex.RLock()
	defer fake.findByIDMutex.RUnlock()
	return len(fake.findByIDArgsForCall)
}

func (fake *FakeUsersRepository) FindByIDCalls(stub func(context.Context, int64) (model.User, error)) {
	fake.findByIDMutex.Lock()
	defer fake.findByIDMutex.Unlock()
	fake.FindByIDStub = stub
}

func (fake *FakeUsersRepository) FindByIDArgsForCall(i int) (context.Context, int64) {
	fake.findByIDMutex.RLock()
	defer fake.findByIDMutex.RUnlock()
	argsForCall := fake.findByIDArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeUsersRepository) FindByIDReturns(result1 model.User, result2 error) {
	fake.findByIDMutex.Lock()
	defer fake.findByIDMutex.Unlock()
	fake.FindByIDStub = nil
	fake.findByIDReturns = struct {
		result1 model.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUsersRepository) FindByIDReturnsOnCall(i int, result1 model.User, result2 error) {
	fake.findByIDMutex.Lock()
	defer fake.findByIDMutex.Unlock()
	fake.FindByIDStub = nil
	if fake.findByIDReturnsOnCall == nil {
		fake.findByIDReturnsOnCall = make(map[int]struct {
			result1 model.User
			result2 error
		})
	}
	fake.findByIDReturnsOnCall[i] = struct {
		result1 model.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUsersRepository) UpdateOne(arg1 context.Context, arg2 model.UpdateUserParams) error {
	fake.updateOneMutex.Lock()
	ret, specificReturn := fake.updateOneReturnsOnCall[len(fake.updateOneArgsForCall)]
	fake.updateOneArgsForCall = append(fake.updateOneArgsForCall, struct {
		arg1 context.Context
		arg2 model.UpdateUserParams
	}{arg1, arg2})
	stub := fake.UpdateOneStub
	fakeReturns := fake.updateOneReturns
	fake.recordInvocation("UpdateOne", []interface{}{arg1, arg2})
	fake.updateOneMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeUsersRepository) UpdateOneCallCount() int {
	fake.updateOneMutex.RLock()
	defer fake.updateOneMutex.RUnlock()
	return len(fake.updateOneArgsForCall)
}

func (fake *FakeUsersRepository) UpdateOneCalls(stub func(context.Context, model.UpdateUserParams) error) {
	fake.updateOneMutex.Lock()
	defer fake.updateOneMutex.Unlock()
	fake.UpdateOneStub = stub
}

func (fake *FakeUsersRepository) UpdateOneArgsForCall(i int) (context.Context, model.UpdateUserParams) {
	fake.updateOneMutex.RLock()
	defer fake.updateOneMutex.RUnlock()
	argsForCall := fake.updateOneArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeUsersRepository) UpdateOneReturns(result1 error) {
	fake.updateOneMutex.Lock()
	defer fake.updateOneMutex.Unlock()
	fake.UpdateOneStub = nil
	fake.updateOneReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUsersRepository) UpdateOneReturnsOnCall(i int, result1 error) {
	fake.updateOneMutex.Lock()
	defer fake.updateOneMutex.Unlock()
	fake.UpdateOneStub = nil
	if fake.updateOneReturnsOnCall == nil {
		fake.updateOneReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateOneReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeUsersRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createOneMutex.RLock()
	defer fake.createOneMutex.RUnlock()
	fake.deleteOneMutex.RLock()
	defer fake.deleteOneMutex.RUnlock()
	fake.findByEmailMutex.RLock()
	defer fake.findByEmailMutex.RUnlock()
	fake.findByIDMutex.RLock()
	defer fake.findByIDMutex.RUnlock()
	fake.updateOneMutex.RLock()
	defer fake.updateOneMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeUsersRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ repository.UsersRepository = new(FakeUsersRepository)
